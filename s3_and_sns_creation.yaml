AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'my-app-recordings'

  MySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'MyAppNotifications'

  MyEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - "aws.dynamodb"
        detail-type:
          - "DynamoDB Stream Record"
        detail:
          eventName:
            - "INSERT"
      Targets:
        - Arn: !Ref MySNSTopic
          Id: "SendNotification"

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ProcessRequestFunction'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          ENDPOINT_NAME = os.environ['SAGEMAKER_ENDPOINT']
          DYNAMODB_TABLE = os.environ['DYNAMODB_TABLE']
          S3_BUCKET = os.environ['S3_BUCKET']
          SNS_TOPIC_ARN = os.environ['SNS_TOPIC_ARN']

          def lambda_handler(event, context):
              user_id = event['user_id']
              input_text = event['input_text']
              recording = event['recording']
              
              upload_to_s3(user_id, recording)
              response = call_gpt4_model(input_text)
              save_outline_to_dynamodb(user_id, response['outline'])
              send_confirmation_sns(user_id)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(response)
              }

          def upload_to_s3(user_id, recording):
              s3 = boto3.client('s3')
              s3.put_object(
                  Bucket=S3_BUCKET,
                  Key=f'recordings/{user_id}.wav',
                  Body=recording
              )

          def call_gpt4_model(input_text):
              client = boto3.client('sagemaker-runtime')
              try:
                  response = client.invoke_endpoint(
                      EndpointName=ENDPOINT_NAME,
                      ContentType='application/json',
                      Body=json.dumps({'input_text': input_text})
                  )
                  result = json.loads(response['Body'].read().decode())
                  return result
              except Exception as e:
                  return {"error": str(e)}

          def save_outline_to_dynamodb(user_id, outline):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(DYNAMODB_TABLE)
              table.put_item(
                  Item={
                      'UserId': user_id,
                      'Outline': outline
                  }
              )

          def send_confirmation_sns(user_id):
              sns = boto3.client('sns')
              sns.publish(
                  TopicArn=SNS_TOPIC_ARN,
                  Message=f'Outline for user {user_id} has been successfully stored in DynamoDB.'
              )
      Runtime: 'python3.8'
      Environment:
        Variables:
          SAGEMAKER_ENDPOINT: 'your-sagemaker-endpoint'
          DYNAMODB_TABLE: 'UserOutlines'
          S3_BUCKET: 'my-app-recordings'
          SNS_TOPIC_ARN: !Ref MySNSTopic

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaSageMakerPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'sagemaker:InvokeEndpoint'
                  - 'dynamodb:PutItem'
                  - 's3:PutObject'
                  - 'sns:Publish'
                  - 'events:PutEvents'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'MyAppAPI'

  MyApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: 'generate-outline'
      RestApiId: !Ref MyApiGateway

  MyApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'POST'
      ResourceId: !Ref MyApiResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt MyLambdaFunction.Arn

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*
        - ApiId: !Ref MyApiGateway